geom_histogram(aes(y = stat(density),fill = 1,colour = 1),bins = 100) +
xlim(c(-0.01,0.01)) + stat_function(
fun = f_local_BAC1,
lwd = 1, colour = 1
) + theme(legend.position = "none",legend.title = element_blank() )
h1
f_local_BAC2 = function(x){dnig(x,param = BAC_fits[time2,])}
h2 <- ggplot(BAC_5minute[Interval[time2,1]:Interval[time2,2],],aes(Returns)) +
geom_histogram(aes(y = stat(density),color=1, fill=1), bins = 100) +
xlim(c(-0.05,0.05)) + stat_function(
fun = f_local_BAC2,
#args = list(x = x, param = sd(df$x)),
lwd = 1, color=1
) + theme(legend.position = "none",legend.title = element_blank() )
h2
qq1 <- ggplot(BAC_5minute[Interval[time1,1]:Interval[time1,2],], aes(sample = Returns)) +
stat_qq(distribution = GeneralizedHyperbolic::qnig,dparams = BAC_fits[time1,]) +
stat_qq_line(distribution = GeneralizedHyperbolic::qnig,dparams = BAC_fits[time1,])
qq2 <- ggplot(BAC_5minute[Interval[time2,1]:Interval[time2,2],], aes(sample = Returns)) +
stat_qq(distribution = GeneralizedHyperbolic::qnig,dparams = BAC_fits[time2,]) +
stat_qq_line(distribution = GeneralizedHyperbolic::qnig,dparams = BAC_fits[time2,])
library(ggpubr)
ggarrange(h1+ ggtitle(NULL), qq1 ,
labels = NULL,
ncol = 2, nrow = 1)
BAC_fits
ggarrange(h2+ ggtitle(NULL), qq2 ,
labels = NULL,
ncol = 2, nrow = 1)
Interval_f = function(i, Window, Refit, Data){
I = 1:Window + (i-1)*Refit
return(Data[I,])
}
Interval_f(1,Window,Refit,BAC_5minute)
ggarrange(h1+ ggtitle(NULL), qq1 ,
labels = NULL,
ncol = 2, nrow = 1)
Interval_f(1072,Window,Refit,BAC_5minute)
ggarrange(h2+ ggtitle(NULL), qq2 ,
labels = NULL,
ncol = 2, nrow = 1)
max(BAC_5minute$Returns)
which(BAC_5minute$Returns == max(BAC_5minute$Returns))
Marginal_validation_plot(Data,start.time,Window,Refit,fits){
fits %<>% lapply(function(x)x[["param"]]) %>% do.call(rbind,.)
Interval_Matrix = function(data,window,refit){
Time <- data[["Time"]] ; data <- data[["Returns"]]
#browser()
number <- ceiling((length(data)-window)/refit)
intervals <- matrix(0,nrow = number,ncol = 2)
intervals[1,] <- c(1,window-1)
for(i in 2:(number)){
intervals[i,] <- intervals[i-1,] + refit
}
return(intervals)
}
Interval = Interval_Matrix(BAC_5minute, Window,Refit)
f <- function(x){dnig(x,param = fits[start.time,])}
histogram <- ggplot(Data[Interval[start.time,1]:Interval[start.time,2],],aes(Returns)) +
geom_histogram(aes(y = stat(density),fill = 1,colour = 1),bins = 100) +
xlim(c(-0.01,0.01)) + stat_function(
fun = f,
lwd = 1, colour = 1
) + theme(legend.position = "none",legend.title = element_blank() )
qqplot <- ggplot(Data[Interval[time1,1]:Interval[time1,2],], aes(sample = Returns)) +
stat_qq(distribution = GeneralizedHyperbolic::qnig,dparams = fits[time1,]) +
stat_qq_line(distribution = GeneralizedHyperbolic::qnig,dparams = fits[time1,])
ggpubr::ggarrange(histogram + ggtitle(NULL), qqplot ,
labels = NULL,
ncol = 2, nrow = 1)
}
Marginal_validation_plot(Data,start.time,Window,Refit,fits){
fits %<>% lapply(function(x)x[["param"]]) %>% do.call(rbind,.)
Interval_Matrix = function(data,window,refit){
Time <- data[["Time"]] ; data <- data[["Returns"]]
#browser()
number <- ceiling((length(data)-window)/refit)
intervals <- matrix(0,nrow = number,ncol = 2)
intervals[1,] <- c(1,window-1)
for(i in 2:(number)){
intervals[i,] <- intervals[i-1,] + refit
}
return(intervals)
}
Interval = Interval_Matrix(BAC_5minute, Window,Refit)
f <- function(x){dnig(x,param = fits[start.time,])}
histogram <- ggplot(Data[Interval[start.time,1]:Interval[start.time,2],],aes(Returns)) +
geom_histogram(aes(y = stat(density),fill = 1,colour = 1),bins = 100) +
xlim(c(-0.01,0.01)) + stat_function(
fun = f,
lwd = 1, colour = 1
) + theme(legend.position = "none",legend.title = element_blank() )
qqplot <- ggplot(Data[Interval[time1,1]:Interval[time1,2],], aes(sample = Returns)) +
stat_qq(distribution = GeneralizedHyperbolic::qnig,dparams = fits[time1,]) +
stat_qq_line(distribution = GeneralizedHyperbolic::qnig,dparams = fits[time1,])
ggpubr::ggarrange(histogram + ggtitle(NULL), qqplot ,
labels = NULL,
ncol = 2, nrow = 1)
}
Marginal_validation_plot <- function(Data,start.time,Window,Refit,fits){
fits %<>% lapply(function(x)x[["param"]]) %>% do.call(rbind,.)
Interval_Matrix = function(data,window,refit){
Time <- data[["Time"]] ; data <- data[["Returns"]]
#browser()
number <- ceiling((length(data)-window)/refit)
intervals <- matrix(0,nrow = number,ncol = 2)
intervals[1,] <- c(1,window-1)
for(i in 2:(number)){
intervals[i,] <- intervals[i-1,] + refit
}
return(intervals)
}
Interval = Interval_Matrix(BAC_5minute, Window,Refit)
f <- function(x){dnig(x,param = fits[start.time,])}
histogram <- ggplot(Data[Interval[start.time,1]:Interval[start.time,2],],aes(Returns)) +
geom_histogram(aes(y = stat(density),fill = 1,colour = 1),bins = 100) +
xlim(c(-0.01,0.01)) + stat_function(
fun = f,
lwd = 1, colour = 1
) + theme(legend.position = "none",legend.title = element_blank() )
qqplot <- ggplot(Data[Interval[time1,1]:Interval[time1,2],], aes(sample = Returns)) +
stat_qq(distribution = GeneralizedHyperbolic::qnig,dparams = fits[time1,]) +
stat_qq_line(distribution = GeneralizedHyperbolic::qnig,dparams = fits[time1,])
ggpubr::ggarrange(histogram + ggtitle(NULL), qqplot ,
labels = NULL,
ncol = 2, nrow = 1)
}
Marginal_validation_plot(BAC_5minute,time1,Window,Refit,BAC_fits)
load("Rdata/Clean_Data_5minutes.RData")
load("Rdata/Tokes_Fits.rdata")
rm(AIG,BAC,WFC)
Marginal_validation_plot <- function(Data,start.time,Window,Refit,fits){
fits %<>% lapply(function(x)x[["param"]]) %>% do.call(rbind,.)
Interval_Matrix = function(data,window,refit){
Time <- data[["Time"]] ; data <- data[["Returns"]]
#browser()
number <- ceiling((length(data)-window)/refit)
intervals <- matrix(0,nrow = number,ncol = 2)
intervals[1,] <- c(1,window-1)
for(i in 2:(number)){
intervals[i,] <- intervals[i-1,] + refit
}
return(intervals)
}
Interval = Interval_Matrix(BAC_5minute, Window,Refit)
f <- function(x){dnig(x,param = fits[start.time,])}
histogram <- ggplot(Data[Interval[start.time,1]:Interval[start.time,2],],aes(Returns)) +
geom_histogram(aes(y = stat(density),fill = 1,colour = 1),bins = 100) +
xlim(c(-0.01,0.01)) + stat_function(
fun = f,
lwd = 1, colour = 1
) + theme(legend.position = "none",legend.title = element_blank() )
qqplot <- ggplot(Data[Interval[time1,1]:Interval[time1,2],], aes(sample = Returns)) +
stat_qq(distribution = GeneralizedHyperbolic::qnig,dparams = fits[time1,]) +
stat_qq_line(distribution = GeneralizedHyperbolic::qnig,dparams = fits[time1,])
ggpubr::ggarrange(histogram + ggtitle(NULL), qqplot ,
labels = NULL,
ncol = 2, nrow = 1)
}
Marginal_validation_plot(BAC_5minute,time1,Window,Refit,BAC_fits)
Marginal_validation_plot(WFC_5minute,time1,Window,Refit,WFC_fits)
Marginal_validation_plot(WFC_5minute,time2,Window,Refit,WFC_fits)
Marginal_validation_plot(AIG_5minute,time1,Window,Refit,AIG_fits)
Marginal_validation_plot(AIG_5minute,time2,Window,Refit,AIG_fits)
Marginal_validation_plot(AIG_5minute,time1,Window,Refit,AIG_fits)
Marginal_validation_plot(WFC_5minute,time1,Window,Refit,WFC_fits)
Marginal_validation_plot(WFC_5minute,time2,Window,Refit,WFC_fits)
Marginal_validation_plot <- function(Data,start.time,Window,Refit,fits){
fits %<>% lapply(function(x)x[["param"]]) %>% do.call(rbind,.)
Interval_Matrix = function(data,window,refit){
Time <- data[["Time"]] ; data <- data[["Returns"]]
#browser()
number <- ceiling((length(data)-window)/refit)
intervals <- matrix(0,nrow = number,ncol = 2)
intervals[1,] <- c(1,window-1)
for(i in 2:(number)){
intervals[i,] <- intervals[i-1,] + refit
}
return(intervals)
}
Interval = Interval_Matrix(BAC_5minute, Window,Refit)
f <- function(x){dnig(x,param = fits[start.time,])}
histogram <- ggplot(Data[Interval[start.time,1]:Interval[start.time,2],],aes(Returns)) +
geom_histogram(aes(y = stat(density),fill = 1,colour = 1),bins = 100) +
#xlim(c(-0.01,0.01)) +
stat_function(
fun = f,
lwd = 1, colour = 1
) + theme(legend.position = "none",legend.title = element_blank() )
qqplot <- ggplot(Data[Interval[time1,1]:Interval[time1,2],], aes(sample = Returns)) +
stat_qq(distribution = GeneralizedHyperbolic::qnig,dparams = fits[time1,],intTol = 1e-16) +
stat_qq_line(distribution = GeneralizedHyperbolic::qnig,dparams = fits[time1,],intTol = 1e-16)
ggpubr::ggarrange(histogram + ggtitle(NULL), qqplot ,
labels = NULL,
ncol = 2, nrow = 1)
}
time1 <- 1 ; time2 <- 1072 ;
Marginal_validation_plot(BAC_5minute,time1,Window,Refit,BAC_fits)
Marginal_validation_plot(BAC_5minute,time2,Window,Refit,BAC_fits)
Marginal_validation_plot(WFC_5minute,time1,Window,Refit,WFC_fits)
quants <- function(q,param){
GeneralizedHyperbolic::qnig(q,param = param,intTol = 1e-16)
}
Marginal_validation_plot <- function(Data,start.time,Window,Refit,fits){
fits %<>% lapply(function(x)x[["param"]]) %>% do.call(rbind,.)
Interval_Matrix = function(data,window,refit){
Time <- data[["Time"]] ; data <- data[["Returns"]]
#browser()
number <- ceiling((length(data)-window)/refit)
intervals <- matrix(0,nrow = number,ncol = 2)
intervals[1,] <- c(1,window-1)
for(i in 2:(number)){
intervals[i,] <- intervals[i-1,] + refit
}
return(intervals)
}
Interval = Interval_Matrix(BAC_5minute, Window,Refit)
f <- function(x){dnig(x,param = fits[start.time,])}
histogram <- ggplot(Data[Interval[start.time,1]:Interval[start.time,2],],aes(Returns)) +
geom_histogram(aes(y = stat(density),fill = 1,colour = 1),bins = 100) +
#xlim(c(-0.01,0.01)) +
stat_function(
fun = f,
lwd = 1, colour = 1
) + theme(legend.position = "none",legend.title = element_blank() )
quants <- function(q,param){
GeneralizedHyperbolic::qnig(q,param = param,intTol = 1e-16)
}
qqplot <- ggplot(Data[Interval[time1,1]:Interval[time1,2],], aes(sample = Returns)) +
stat_qq(distribution = quants,dparams = fits[time1,],intTol = 1e-16) +
stat_qq_line(distribution = quants,dparams = fits[time1,],intTol = 1e-16)
ggpubr::ggarrange(histogram + ggtitle(NULL), qqplot ,
labels = NULL,
ncol = 2, nrow = 1)
}
time1 <- 1 ; time2 <- 1072 ;
Marginal_validation_plot(BAC_5minute,time1,Window,Refit,BAC_fits)
quants <- function(q,mu,delta,alpha,beta){
GeneralizedHyperbolic::qnig(q,mu = mu,delta=delta,alpha=alpha,beta=beta,intTol = 1e-16)
}
Marginal_validation_plot <- function(Data,start.time,Window,Refit,fits){
fits %<>% lapply(function(x)x[["param"]]) %>% do.call(rbind,.)
Interval_Matrix = function(data,window,refit){
Time <- data[["Time"]] ; data <- data[["Returns"]]
#browser()
number <- ceiling((length(data)-window)/refit)
intervals <- matrix(0,nrow = number,ncol = 2)
intervals[1,] <- c(1,window-1)
for(i in 2:(number)){
intervals[i,] <- intervals[i-1,] + refit
}
return(intervals)
}
Interval = Interval_Matrix(BAC_5minute, Window,Refit)
f <- function(x){dnig(x,param = fits[start.time,])}
histogram <- ggplot(Data[Interval[start.time,1]:Interval[start.time,2],],aes(Returns)) +
geom_histogram(aes(y = stat(density),fill = 1,colour = 1),bins = 100) +
#xlim(c(-0.01,0.01)) +
stat_function(
fun = f,
lwd = 1, colour = 1
) + theme(legend.position = "none",legend.title = element_blank() )
quants <- function(q,mu,delta,alpha,beta){
GeneralizedHyperbolic::qnig(q,mu = mu,delta=delta,alpha=alpha,beta=beta,intTol = 1e-16)
}
qqplot <- ggplot(Data[Interval[time1,1]:Interval[time1,2],], aes(sample = Returns)) +
stat_qq(distribution = quants,dparams = fits[time1,],intTol = 1e-16) +
stat_qq_line(distribution = quants,dparams = fits[time1,],intTol = 1e-16)
ggpubr::ggarrange(histogram + ggtitle(NULL), qqplot ,
labels = NULL,
ncol = 2, nrow = 1)
}
time1 <- 1 ; time2 <- 1072 ;
Marginal_validation_plot(BAC_5minute,time1,Window,Refit,BAC_fits)
Marginal_validation_plot <- function(Data,start.time,Window,Refit,fits){
fits %<>% lapply(function(x)x[["param"]]) %>% do.call(rbind,.)
Interval_Matrix = function(data,window,refit){
Time <- data[["Time"]] ; data <- data[["Returns"]]
#browser()
number <- ceiling((length(data)-window)/refit)
intervals <- matrix(0,nrow = number,ncol = 2)
intervals[1,] <- c(1,window-1)
for(i in 2:(number)){
intervals[i,] <- intervals[i-1,] + refit
}
return(intervals)
}
Interval = Interval_Matrix(BAC_5minute, Window,Refit)
f <- function(x){dnig(x,param = fits[start.time,])}
histogram <- ggplot(Data[Interval[start.time,1]:Interval[start.time,2],],aes(Returns)) +
geom_histogram(aes(y = stat(density),fill = 1,colour = 1),bins = 100) +
#xlim(c(-0.01,0.01)) +
stat_function(
fun = f,
lwd = 1, colour = 1
) + theme(legend.position = "none",legend.title = element_blank() )
quants <- function(p,mu,delta,alpha,beta){
GeneralizedHyperbolic::qnig(p,mu = mu,delta=delta,alpha=alpha,beta=beta,intTol = 1e-16)
}
qqplot <- ggplot(Data[Interval[time1,1]:Interval[time1,2],], aes(sample = Returns)) +
stat_qq(distribution = quants,dparams = fits[time1,],intTol = 1e-16) +
stat_qq_line(distribution = quants,dparams = fits[time1,],intTol = 1e-16)
ggpubr::ggarrange(histogram + ggtitle(NULL), qqplot ,
labels = NULL,
ncol = 2, nrow = 1)
}
time1 <- 1 ; time2 <- 1072 ;
Marginal_validation_plot(BAC_5minute,time1,Window,Refit,BAC_fits)
Marginal_validation_plot <- function(Data,start.time,Window,Refit,fits){
fits %<>% lapply(function(x)x[["param"]]) %>% do.call(rbind,.)
Interval_Matrix = function(data,window,refit){
Time <- data[["Time"]] ; data <- data[["Returns"]]
#browser()
number <- ceiling((length(data)-window)/refit)
intervals <- matrix(0,nrow = number,ncol = 2)
intervals[1,] <- c(1,window-1)
for(i in 2:(number)){
intervals[i,] <- intervals[i-1,] + refit
}
return(intervals)
}
Interval = Interval_Matrix(BAC_5minute, Window,Refit)
f <- function(x){dnig(x,param = fits[start.time,])}
histogram <- ggplot(Data[Interval[start.time,1]:Interval[start.time,2],],aes(Returns)) +
geom_histogram(aes(y = stat(density),fill = 1,colour = 1),bins = 100) +
#xlim(c(-0.01,0.01)) +
stat_function(
fun = f,
lwd = 1, colour = 1
) + theme(legend.position = "none",legend.title = element_blank() )
quants <- function(p){
GeneralizedHyperbolic::qnig(p,param = fits[time1,],intTol = 1e-16)
}
qqplot <- ggplot(Data[Interval[time1,1]:Interval[time1,2],], aes(sample = Returns)) +
stat_qq(distribution = quants) +
stat_qq_line(distribution = quants)
ggpubr::ggarrange(histogram + ggtitle(NULL), qqplot ,
labels = NULL,
ncol = 2, nrow = 1)
}
time1 <- 1 ; time2 <- 1072 ;
Marginal_validation_plot(BAC_5minute,time1,Window,Refit,BAC_fits)
Marginal_validation_plot <- function(Data,start.time,Window,Refit,fits){
fits %<>% lapply(function(x)x[["param"]]) %>% do.call(rbind,.)
Interval_Matrix = function(data,window,refit){
Time <- data[["Time"]] ; data <- data[["Returns"]]
#browser()
number <- ceiling((length(data)-window)/refit)
intervals <- matrix(0,nrow = number,ncol = 2)
intervals[1,] <- c(1,window-1)
for(i in 2:(number)){
intervals[i,] <- intervals[i-1,] + refit
}
return(intervals)
}
Interval = Interval_Matrix(BAC_5minute, Window,Refit)
f <- function(x){dnig(x,param = fits[start.time,])}
histogram <- ggplot(Data[Interval[start.time,1]:Interval[start.time,2],],aes(Returns)) +
geom_histogram(aes(y = stat(density),fill = 1,colour = 1),bins = 100) +
#xlim(c(-0.01,0.01)) +
stat_function(
fun = f,
lwd = 1, colour = 1
) + theme(legend.position = "none",legend.title = element_blank() )
quants <- function(p){
GeneralizedHyperbolic::qnig(p,param = fits[time1,],intTol = 1e-12)
}
qqplot <- ggplot(Data[Interval[time1,1]:Interval[time1,2],], aes(sample = Returns)) +
stat_qq(distribution = quants) +
stat_qq_line(distribution = quants)
ggpubr::ggarrange(histogram + ggtitle(NULL), qqplot ,
labels = NULL,
ncol = 2, nrow = 1)
}
time1 <- 1 ; time2 <- 1072 ;
Marginal_validation_plot(BAC_5minute,time1,Window,Refit,BAC_fits)
Marginal_validation_plot(BAC_5minute,time2,Window,Refit,BAC_fits)
Marginal_validation_plot(WFC_5minute,time1,Window,Refit,WFC_fits)
Marginal_validation_plot(WFC_5minute,time2,Window,Refit,WFC_fits)
Marginal_validation_plot(AIG_5minute,time1,Window,Refit,AIG_fits)
Marginal_validation_plot(AIG_5minute,time2,Window,Refit,AIG_fits)
Marginal_validation_plot(BAC_5minute,time1,Window,Refit,BAC_fits)
Marginal_validation_plot(BAC_5minute,time2,Window,Refit,BAC_fits)
Marginal_validation_plot(WFC_5minute,time1,Window,Refit,WFC_fits)
Marginal_validation_plot(WFC_5minute,time2,Window,Refit,WFC_fits)
Marginal_validation_plot(AIG_5minute,time1,Window,Refit,AIG_fits)
Marginal_validation_plot(AIG_5minute,time2,Window,Refit,AIG_fits)
Marginal_validation_plot(BAC_5minute,time1,Window,Refit,BAC_fits)
Marginal_validation_plot(BAC_5minute,time2,Window,Refit,BAC_fits)
Marginal_validation_plot(WFC_5minute,time1,Window,Refit,WFC_fits)
Marginal_validation_plot(WFC_5minute,time2,Window,Refit,WFC_fits)
Marginal_validation_plot(AIG_5minute,time1,Window,Refit,AIG_fits)
Marginal_validation_plot(AIG_5minute,time2,Window,Refit,AIG_fits)
load("C:/Users/Thoma/Dropbox/Projektgruppe/P8/R filer/Full_Data.RData")
setwd("C:/Users/Thoma/Dropbox/Projektgruppe/P8/R filer/P8/Databases")
DB <- dbConnect(RSQLite::SQLite(), dbname = "./AIG.db")
pacman::p_load(dbplyr,RSQLite,DBI,tidyverse,parallel)
DB <- dbConnect(RSQLite::SQLite(), dbname = "./AIG.db")
Collected = tbl(DB) collect()
Collected = tbl(DB) %>%  collect()
Collected = tbl(DB) %>% collect()
Collected = tbl(DB,"AIG") %>% collect()
head(Collected)
AIG = tbl(DB,"AIG") %>% collect()
DB <- dbConnect(RSQLite::SQLite(), dbname = "./WFC.db")
WFC = tbl(DB,"AIG") %>% collect()
DB <- dbConnect(RSQLite::SQLite(), dbname = "./WFC.db")
WFC = tbl(DB,"WFC") %>% collect()
DB <- dbConnect(RSQLite::SQLite(), dbname = "./BAC.db")
BAC = tbl(DB,"BAC") %>% collect()
rm(DB)
rm(Collected)
DB <- dbConnect(RSQLite::SQLite(), dbname = "./BAC.db")
BAC = tbl(DB,"BAC") %>% collect()
library(GeneralizedHyperbolic)
path = "C:/Users/toke/Dropbox/P6/P8/R filer/DataBases"
getdbdata = function(series,path = ""){
library(dbplyr);library(RSQLite);library(DBI);library(tidyverse)
con = dbConnect(RSQLite::SQLite(), dbname = paste0(path,"/",series,".db"))
result = tbl(con, series) %>% collect() %>% unique()
dbDisconnect(con)
return(result)
}
returns = function(df){
library(magrittr)
df %<>% mutate(returns = c(0,price %>% log %>% diff))
return(df)
}
library(GeneralizedHyperbolic)
path = "C:/Users/toke/Dropbox/P6/P8/R filer/DataBases"
getdbdata = function(series,path = ""){
library(dbplyr);library(RSQLite);library(DBI);library(tidyverse)
con = dbConnect(RSQLite::SQLite(), dbname = paste0(path,"/",series,".db"))
result = tbl(con, series) %>% collect() %>% unique()
dbDisconnect(con)
return(result)
}
returns = function(df){
library(magrittr)
df %<>% mutate(returns = c(0,price %>% log %>% diff))
return(df)
}
AIG = getdbdata("AIG",path)
BAC = getdbdata("BAC",path)
path = "./Databases"
setwd("C:/Users/Thoma/Dropbox/Projektgruppe/P8/R filer/P8")
library(GeneralizedHyperbolic)
library(GeneralizedHyperbolic)
path = "./Databases"
getdbdata = function(series,path = ""){
library(dbplyr);library(RSQLite);library(DBI);library(tidyverse)
con = dbConnect(RSQLite::SQLite(), dbname = paste0(path,"/",series,".db"))
result = tbl(con, series) %>% collect() %>% unique()
dbDisconnect(con)
return(result)
}
returns = function(df){
library(magrittr)
df %<>% mutate(returns = c(0,price %>% log %>% diff))
return(df)
}
AIG = getdbdata("AIG",path)
BAC = getdbdata("BAC",path)
library(tidyverse);library(magrittr)
AIG %<>% returns
BAC %<>% returns
WFC <- getdbdata("WFC",path)
rm(path,getdbdata,returns)
save.image("C:/Users/Thoma/Dropbox/Projektgruppe/P8/R filer/P8/Rdata/Clean_Data.RData")
setwd("C:/Users/Thoma/Dropbox/Projektgruppe/P8/R filer/P8")
# Fit Normal Inverse Gaussian ---------------------------------------------
library(GeneralizedHyperbolic); library(tidyverse); library(magrittr); library(lubridate)
#setwd("C:/Users/toke/Dropbox/P6/P8/R filer/P8/Rdata")
{load("./Rdata/Clean_Data.Rdata"); WFC = WFC.data; rm(WFC.data); rm(BAC.returns,AIG.returns,WFC.returns)}
#setwd("C:/Users/toke/Dropbox/P6/P8/R filer/P8/Rdata")
{load("./Rdata/Clean_Data.Rdata"); ; rm(BAC.returns,AIG.returns,WFC.returns)}
#Add Lubridate Time Format for Easy Subsetting
AIG %<>% mutate(Time = ymd_hms(utcsec), Price = price) %>% select(Time,Price)
BAC %<>% mutate(Time = ymd_hms(utcsec), Price = price) %>% select(Time,Price)
WFC %<>% mutate(Time = ymd_hms(utcsec), Price = price) %>% select(Time,Price)
#Visualize Data
AIG %>% ggplot(aes(x = Time, y = Price)) + geom_line()
BAC %>% ggplot(aes(x = Time, y = Price)) + geom_line()
WFC %>% ggplot(aes(x = Time, y = Price)) + geom_line()
#Draw Random Samples
library(copula); library(parallel); library(GeneralizedHyperbolic)
data <- rnorm(450)
hist(data)
data <- rnorm(450);data <- data.frame(1:450,data)
library(tidyverse)
ggplot(data) + geom_
ggplot(data) + geom_histogram(aes(x = data))
ggplot(data) + geom_histogram(aes(x = data),fill = "white")
ggplot(data) + geom_histogram(aes(x = data),fill = "white",color = "black")
ggplot(data) + geom_histogram(aes(x = data),fill = "white",color = "black",stat = "density")+
geom_density(mapping = dnorm(),stat = "density")
ggplot(data) + geom_histogram(aes(x = data),fill = "white",color = "black",stat = "density")+
geom_density(mapping = dnorm,stat = "density")
ggplot(data,aes(x = data)) + geom_histogram(fill = "white",color = "black",stat = "density")+
geom_density(mapping = dnorm,stat = "density")
ggplot(data,aes(x = data)) + geom_histogram(fill = "white",color = "black",stat = "density")+
geom_density(mapping = dnorm,stat = "density")
ggplot(data,aes(x = data)) + geom_histogram(fill = "white",color = "black",stat = "density")#+
ggplot(data,aes(x = data)) + geom_histogram(aes(y = ..density..),fill = "white",color = "black")#+
ggplot(data,aes(x = data)) + geom_histogram(aes(y = ..density..),fill = "white",color = "black")+
stat_function(fun = dnorm)
0.546/(sqrt((1-0.546^2))/(2032-2))
(1-0.546^2))/(2032-2)
0.546/(sqrt((1-0.546^2)/(2032-2)))
ggplot(data,aes(x = data)) + geom_histogram(aes(y = ..density..),fill = "white",color = "black")+
stat_function(fun = dnorm)
0.546/(sqrt((1-0.546^2)/(2032-2)))
