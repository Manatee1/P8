try()
if("try-error" %in% class(temp)){AIG_fits[[as.character(date(t) + weeks(4))]] = AIG_fits[[i]]}else{
AIG_fits[[as.character(date(t) + weeks(4))]] = temp
}
i = i + 1
j = which(AIG_5minute$Time == t)
t = AIG_5minute$Time[j+395]
if(!(t %in% AIG_5minute$Time)) break
}
# Fit Normal Inverse Gaussian ---------------------------------------------
library(GeneralizedHyperbolic); library(tidyverse); library(magrittr); library(lubridate)
#setwd("C:/Users/toke/Dropbox/P6/P8/R filer/P8/Rdata")
{load("Clean_data.Rdata"); WFC = WFC.data; rm(WFC.data); rm(BAC.returns,AIG.returns,WFC.returns)}
#Add Lubridate Time Format for Easy Subsetting
AIG %<>% mutate(Time = ymd_hms(utcsec), Price = price) %>% select(Time,Price)
BAC %<>% mutate(Time = ymd_hms(utcsec), Price = price) %>% select(Time,Price)
WFC %<>% mutate(Time = ymd_hms(utcsec), Price = price) %>% select(Time,Price)
#Subset Every 5th minute
AIG_5minute = AIG %>% filter(minute(Time) %% 5 == 0)
BAC_5minute = BAC %>% filter(minute(Time) %% 5 == 0)
WFC_5minute = WFC %>% filter(minute(Time) %% 5 == 0)
#Add Returns
AIG_5minute %<>% mutate(Returns = c(0,diff(log(Price))))
BAC_5minute %<>% mutate(Returns = c(0,diff(log(Price))))
WFC_5minute %<>% mutate(Returns = c(0,diff(log(Price))))
save.image("C:/Users/toke/Dropbox/P6/P8/R filer/P8/Rdata/Clean_Data_5minutes.Rdata.RData")
which(WFC_5minute$Returns == min(WFC_5minute$Returns))
which(WFC_5minute[["Returns"]] == min(WFC_5minute[["Returns"]]))
stock_split = which(WFC_5minute[["Returns"]] == min(WFC_5minute[["Returns"]]))
WFC_5minute[["Returns"]][stock_split] = log((2*WFC_5minute[["Price"]][stock_split])/WFC_5minute[["Price"]][stock_split-1])
rm(stock_split)
WFC_5minute %>% pull(Returns) %>% hist()
WFC_5minute %>% pull(Returns) %>% hist(breaks = 1000)
save.image("C:/Users/toke/Dropbox/P6/P8/R filer/P8/Rdata/Clean_Data_5minutes.RData")
WFC_5minute$Time[1]
which(WFC_5minute[["Time"]] == WFC_5minute[["Time"]] + days(1))
which(WFC_5minute[["Time"]] == WFC_5minute[["Time"]][1] + days(1))
#Observations per Day
O = which(WFC_5minute[["Time"]] == WFC_5minute[["Time"]][1] + days(1)) - 1
Window = 21*O
Refit = O
Window = 21*O
Refit = O
rm(O)
save.image("C:/Users/toke/Dropbox/P6/P8/R filer/P8/Rdata/Clean_Data_5minutes.RData")
length(AIG_5minute) %% Refit
View(AIG)
length(AIG_5minute) %/% Refit
length(AIG_5minute) %/% Refit
length(AIG_5minute)
nrow(AIG_5minute) %% Refit
nrow(AIG_5minute) %% Refit
nrow(AIG_5minute) %/% Refit
1257*Refit
#Interval Matrix and Interval
Interval_Matrix = function(data,window,refit){
Time <- data$Time ; data <- data$Return
#browser()
number <- ceiling((length(data)-window)/refit)
intervals <- matrix(0,nrow = number,ncol = 2)
intervals[1,] <- c(1,window-1)
for(i in 2:(number)){
intervals[i,] <- intervals[i-1,] + refit
}
return(intervals)
}
Interval = function(i, Window, Refit, Data){
I = 1:Window + i*Refit
return(Data[I,])
}
Interval(1,Window,Refit,AIG_5minute)
Interval = function(i, Window, Refit, Data){
I = 1:Window + (i-1)*Refit
return(Data[I,])
}
Interval(1,Window,Refit,AIG_5minute)
Interval(2,Window,Refit,AIG_5minute)
Interval(3,Window,Refit,AIG_5minute)
Interval(4,Window,Refit,AIG_5minute)
Interval(1,Window,Refit,AIG_5minute)
Interval(1,Window,Refit,AIG_5minute) %>% pull(Returns)
nigFit(Interval(1,Window,Refit,AIG_5minute) %>% pull(Returns))
nigFit(Interval(2,Window,Refit,AIG_5minute) %>% pull(Returns))
nigFit(Interval(3,Window,Refit,AIG_5minute) %>% pull(Returns))
nigFit(Interval(4,Window,Refit,AIG_5minute) %>% pull(Returns))
nigFit(Interval(5,Window,Refit,AIG_5minute) %>% pull(Returns))
nigFit(Interval(6,Window,Refit,AIG_5minute) %>% pull(Returns))
nigFit(Interval(1,Window,Refit,AIG_5minute) %>% pull(Returns))
nrow(AIG_5minute) %% Refit
nrow(AIG_5minute) %/% Refit
n = nrow(AIG_5minute) %/% Refit
n = nrow(AIG_5minute) %/% Refit
Fits = lapply(1:n, function(x){try(nigFit(Interval(x,Window,Refit,AIG_5minute) %>% pull(Returns)))})
failed = rep(0,n)
failed = rep(0,n)
j = 0
for(i in Fits){
j+1
if("try-error" %in% class(i)) failed[j] = 1
}
sum(failed)
failed = rep(0,n)
j = 0
for(i in Fits){
j+1
if("try-error" %in% class(i)) failed[j] = 1
}
sum(failed)
Fits[[1]]
Fits[[1]]$param
Fits %>% lapply(function(x){x[["param"]]})
Parameters = Fits %>% lapply(function(x){x[["param"]]}) %>% do.call(rbind,.)
plot(Parameters[,1], type = "l")
plot(Parameters[,2], type = "l")
plot(Parameters[,4], type = "l")
plot(Parameters[,3], type = "l")
AIG_fits = Fits
BAC_fits = lapply(1:n, function(x){try(nigFit(Interval(x,Window,Refit,BAC_5minute) %>% pull(Returns)))})
failed = rep(0,n)
j = 0
for(i in BAC_fits){
j = j + 1
if("try-error" %in% class(i)) failed[j] = 1
}
sum(failed)
WFC_fits = lapply(1:n, function(x){try(nigFit(Interval(x,Window,Refit,WFC_5minute) %>% pull(Returns)))})
failed = rep(0,n)
j = 0
for(i in WFC_fits){
j = j + 1
if("try-error" %in% class(i)) failed[j] = 1
}
sum(failed)
failed = function(list){
failed = rep(0,length(list))
j = 0
for(i in list){
j = j + 1
if("try-error" %in% class(i)){failed[j] = 1}
}
if(sum(failed) == 0){print("No Errors")}else{return(failed)}
}
failed(WFC_fits)
failed = function(list){
failed = rep(0,length(list))
j = 0
for(i in list){
j = j + 1
if("try-error" %in% class(i)){failed[j] = 1}
}
if(sum(failed) == 0){print("No Errors")}else{return(failed)}
}
save(AIG_fits, BAC_fits, WFC_fits, file = "Tokes_Fits.RData")
rm(j,Parameters,Fits,i)
Make_Uniform = function(i,Window,Refit,Data,Fit){
Local_Data = pull(Interval(i,Window,Refit,Data),Returns)
U = pnig(Local_Data, param = Fit[[i]][["param"]])
return(U)
}
Make_Uniform(1,Window,Refit,AIG_5minute,AIG_fits)
Make_Uniform = function(i,Window,Refit,Data,Fit){
Local_Data = pull(Interval(i,Window,Refit,Data),Returns)
tol = 1e-16
U = try(pnig(Local_Data, param = Fit[[i]][["param"]]))
while("try-error" %in% class(U)){
U = try(pnig(Local_Data, param = Fit[[i]][["param"]],intTol = tol))
if("try-error" %in% class(U)) tol = tol*10
if(tol > 1e-6) stop("Tolerance greater than 1e-6")
}
return(U)
}
Make_Uniform(1,Window,Refit,AIG_5minute,AIG_fits)
Make_Uniform = function(i,Window,Refit,Data,Fit){
Local_Data = pull(Interval(i,Window,Refit,Data),Returns)
tol = 1e-16
U = try(pnig(Local_Data, param = Fit[[i]][["param"]]),silent =T)
while("try-error" %in% class(U)){
U = try(pnig(Local_Data, param = Fit[[i]][["param"]],intTol = tol), silent = T)
if("try-error" %in% class(U)) tol = tol*10
if(tol > 1e-6) stop("Tolerance greater than 1e-6")
}
return(U)
}
Uniform = Make_Uniform(1,Window,Refit,AIG_5minute,AIG_fits)
hist(Uniform)
hist(Uniform, breaks = 100)
hist(Uniform, breaks = 1000)
hist(Uniform, breaks = 30)
Make_Uniform = function(i,Window,Refit,Data,Fit, tol = 1e-16){
Local_Data = pull(Interval(i,Window,Refit,Data),Returns)
U = try(pnig(Local_Data, param = Fit[[i]][["param"]], intTol = tol),silent =T)
while("try-error" %in% class(U)){
U = try(pnig(Local_Data, param = Fit[[i]][["param"]],intTol = tol), silent = T)
if("try-error" %in% class(U)) tol = tol*10
if(tol > 1e-6) stop("Tolerance greater than 1e-6")
}
return(U)
}
Uniform = Make_Uniform(1,Window,Refit,AIG_5minute,AIG_fits,1e-8)
hist(Uniform, breaks = 30)
hist(Uniform, breaks = 30)
AIG_Uniform = Make_Uniform(1,Window,Refit,AIG_5minute,AIG_fits,1e-8)
WFC_Uniform = Make_Uniform(1,Window,Refit,AIG_5minute,AIG_fits,1e-8)
plot(WFC_Uniform)
hist(WFC_Uniform)
hist(WFC_Uniform, breaks = 30)
WFC_Uniform = Make_Uniform(1,Window,Refit,WFC_5minute,AIG_fits,1e-8)
BAC_Uniform = Make_Uniform(1,Window,Refit,BAC_5minute,AIG_fits,1e-8)
hist(BAC_Uniform)
AIG_Uniform = Make_Uniform(1,Window,Refit,AIG_5minute,AIG_fits)
WFC_Uniform = Make_Uniform(1,Window,Refit,WFC_5minute,AIG_fits)
BAC_Uniform = Make_Uniform(1,Window,Refit,BAC_5minute,AIG_fits)
hist(BAC_Uniform)
AIG_Uniform = Make_Uniform(2,Window,Refit,AIG_5minute,AIG_fits)
hist(AIG_Uniform)
AIG_Uniform = Make_Uniform(1,Window,Refit,AIG_5minute,AIG_fits)
microbenchmark::microbenchmark(AIG_Uniform = Make_Uniform(1,Window,Refit,AIG_5minute,AIG_fits),
AIG_Uniform_2 = Make_Uniform(1,Window,Refit,AIG_5minute,AIG_fits, tol = 1e-8))
microbenchmark::microbenchmark(AIG_Uniform = Make_Uniform(1,Window,Refit,AIG_5minute,AIG_fits),
AIG_Uniform_2 = Make_Uniform(1,Window,Refit,AIG_5minute,AIG_fits, tol = 1e-8),times = 5)
AIG_Uniform == AIG_Uniform_2
any(AIG_Uniform > 1)
any(AIG_Uniform < 0)
max(AIG_Uniform)
min(AIG_Uniform)
plot(WFC_Uniform, BAC_Uniform)
library(copula)
tCopula(dim = 2)
fitCopula(tCopula(dim = 2), cbind(WFC_Uniform, AIC_Uniform))
fitCopula(tCopula(dim = 2), cbind(WFC_Uniform, BAC_Uniform))
Make_Uniform = function(i,Window,Refit,Data,Fit, tol = 1e-16){
Local_Data = pull(Interval(i,Window,Refit,Data),Returns)
U = try(pnig(Local_Data, param = Fit[[i]][["param"]], intTol = tol),silent =T)
while("try-error" %in% class(U)){
U = try(pnig(Local_Data, param = Fit[[i]][["param"]],intTol = tol), silent = T)
if("try-error" %in% class(U)) tol = tol*10
if(tol > 1e-6) stop("Tolerance greater than 1e-6")
}
name = deparse(substitute(Data)) %>% strsplit("_") %>% .[1]
attr(U) = name
return(U)
}
AIG_Uniform = Make_Uniform(1,Window,Refit,AIG_5minute,AIG_fits)
Make_Uniform = function(i,Window,Refit,Data,Fit, tol = 1e-16){
Local_Data = pull(Interval(i,Window,Refit,Data),Returns)
U = try(pnig(Local_Data, param = Fit[[i]][["param"]], intTol = tol),silent =T)
while("try-error" %in% class(U)){
U = try(pnig(Local_Data, param = Fit[[i]][["param"]],intTol = tol), silent = T)
if("try-error" %in% class(U)) tol = tol*10
if(tol > 1e-6) stop("Tolerance greater than 1e-6")
}
name = deparse(substitute(Data)) %>% strsplit("_") %>% .[1]
attr(U, "name") =  name
return(U)
}
AIG_Uniform = Make_Uniform(1,Window,Refit,AIG_5minute,AIG_fits)
AIG_Uniform
Make_Uniform = function(i,Window,Refit,Data,Fit, tol = 1e-16){
Local_Data = pull(Interval(i,Window,Refit,Data),Returns)
U = try(pnig(Local_Data, param = Fit[[i]][["param"]], intTol = tol),silent =T)
while("try-error" %in% class(U)){
U = try(pnig(Local_Data, param = Fit[[i]][["param"]],intTol = tol), silent = T)
if("try-error" %in% class(U)) tol = tol*10
if(tol > 1e-6) stop("Tolerance greater than 1e-6")
}
name = deparse(substitute(Data)) %>% strsplit("_") %>% unlist %>% .[1]
attr(U, "name") =  name
return(U)
}
AIG_Uniform = Make_Uniform(1,Window,Refit,AIG_5minute,AIG_fits)
AIG_Uniform
WFC_Uniform = Make_Uniform(1,Window,Refit,WFC_5minute,AIG_fits)
BAC_Uniform = Make_Uniform(1,Window,Refit,BAC_5minute,AIG_fits)
?pull
fit_copula = function(i,Window, Refit, Data_1, Data_2, Fit_1, Fit_2, Copula, tolerance = 1e-8){
browser()
Make_Uniform = function(i,Window,Refit,Data,Fit, tol = 1e-16){
library(dplyr);library(GeneralizedHyperbolic)
Interval = function(i, Window, Refit, Data){
I = 1:Window + (i-1)*Refit
return(Data[I,])
}
Local_Data = pull(Interval(i,Window,Refit,Data),Returns)
U = try(pnig(Local_Data, param = Fit[[i]][["param"]], intTol = tol),silent =T)
while("try-error" %in% class(U)){
U = try(pnig(Local_Data, param = Fit[[i]][["param"]],intTol = tol), silent = T)
if("try-error" %in% class(U)) tol = tol*10
if(tol > 1e-6) stop("Tolerance greater than 1e-6")
}
name = deparse(substitute(Data)) %>% strsplit("_") %>% unlist %>% .[1]
attr(U, "name") =  name
return(U)
}
library(copula)
Uniform_1 = Make_Uniform(i,Window,Refit,Data_1,Fit_1,tolerance)
Uniform_2 = Make_Uniform(i,Window,Refit,Data_2,Fit_2,tolerance)
Data = data.frame(Uniform_1,Uniform_2)
names(Data) = c(attr(Uniform_1,"name"),attr(Uniform_2,"name"))
fitCopula(Copula, Data)
}
fit_copula(1,Window,Refit, WFC_5minute, BAC_5minute, WFC_fits, BAC_fits,tCopula(dim = 2))
Data
Uniform_1
fit_copula = function(i,Window, Refit, Data_1, Data_2, Fit_1, Fit_2, Copula, tolerance = 1e-8){
browser()
Make_Uniform = function(i,Window,Refit,Data,Fit, tol = 1e-16){
library(dplyr);library(GeneralizedHyperbolic)
Interval = function(i, Window, Refit, Data){
I = 1:Window + (i-1)*Refit
return(Data[I,])
}
Local_Data = pull(Interval(i,Window,Refit,Data),Returns)
U = try(pnig(Local_Data, param = Fit[[i]][["param"]], intTol = tol),silent =T)
while("try-error" %in% class(U)){
U = try(pnig(Local_Data, param = Fit[[i]][["param"]],intTol = tol), silent = T)
if("try-error" %in% class(U)) tol = tol*10
if(tol > 1e-6) stop("Tolerance greater than 1e-6")
}
name = deparse(substitute(Data)) %>% strsplit("_") %>% unlist %>% .[1]
attr(U, "name") =  name
return(U)
}
library(copula)
Uniform_1 = Make_Uniform(i,Window,Refit,Data_1,Fit_1,tolerance)
Uniform_2 = Make_Uniform(i,Window,Refit,Data_2,Fit_2,tolerance)
Data = data.frame(Uniform_1,Uniform_2)
names(Data) = c(attr(Uniform_1,"name"),attr(Uniform_2,"name"))
return(try(fitCopula(Copula, Data),silent = T))
}
fit_copula(1,Window,Refit, WFC_5minute, BAC_5minute, WFC_fits, BAC_fits,tCopula(dim = 2))
fit_copula = function(i,Window, Refit, Data_1, Data_2, Fit_1, Fit_2, Copula, tolerance = 1e-8){
#browser()
Make_Uniform = function(i,Window,Refit,Data,Fit, tol = 1e-16){
library(dplyr);library(GeneralizedHyperbolic)
Interval = function(i, Window, Refit, Data){
I = 1:Window + (i-1)*Refit
return(Data[I,])
}
Local_Data = pull(Interval(i,Window,Refit,Data),Returns)
U = try(pnig(Local_Data, param = Fit[[i]][["param"]], intTol = tol),silent =T)
while("try-error" %in% class(U)){
U = try(pnig(Local_Data, param = Fit[[i]][["param"]],intTol = tol), silent = T)
if("try-error" %in% class(U)) tol = tol*10
if(tol > 1e-6) stop("Tolerance greater than 1e-6")
}
name = deparse(substitute(Data)) %>% strsplit("_") %>% unlist %>% .[1]
attr(U, "name") =  name
return(U)
}
library(copula)
Uniform_1 = Make_Uniform(i,Window,Refit,Data_1,Fit_1,tolerance)
Uniform_2 = Make_Uniform(i,Window,Refit,Data_2,Fit_2,tolerance)
Data = data.frame(Uniform_1,Uniform_2)
names(Data) = c(attr(Uniform_1,"name"),attr(Uniform_2,"name"))
return(try(fitCopula(Copula, Data),silent = T))
}
{
tictoc::tic()
fit_copula(1,Window,Refit, WFC_5minute, BAC_5minute, WFC_fits, BAC_fits,tCopula(dim = 2))
tictoc::toc()
}
fit_copula = function(i,Window, Refit, Data_1, Data_2, Fit_1, Fit_2, Copula, tolerance = 1e-8){
#browser()
Make_Uniform = function(i,Window,Refit,Data,Fit, tol = 1e-16){
library(dplyr);library(GeneralizedHyperbolic)
Interval = function(i, Window, Refit, Data){
I = 1:Window + (i-1)*Refit
return(Data[I,])
}
Local_Data = pull(Interval(i,Window,Refit,Data),Returns)
U = try(pnig(Local_Data, param = Fit[[i]][["param"]], intTol = tol),silent =T)
while("try-error" %in% class(U)){
U = try(pnig(Local_Data, param = Fit[[i]][["param"]],intTol = tol), silent = T)
if("try-error" %in% class(U)) tol = tol*10
if(tol > 1e-6) stop("Tolerance greater than 1e-6")
}
name = deparse(substitute(Data)) %>% strsplit("_") %>% unlist %>% .[1]
attr(U, "name") =  name
return(U)
}
library(copula)
Uniform_1 = Make_Uniform(i,Window,Refit,Data_1,Fit_1,tolerance)
Uniform_2 = Make_Uniform(i,Window,Refit,Data_2,Fit_2,tolerance)
return(try(fitCopula(Copula, cbind(Uniform_1,Uniform_2)),silent = T))
}
{
tictoc::tic()
fit_copula(1,Window,Refit, WFC_5minute, BAC_5minute, WFC_fits, BAC_fits,tCopula(dim = 2))
tictoc::toc()
}
fit_copula = function(i,Window, Refit, Data_1, Data_2, Fit_1, Fit_2, Copula, tolerance = 1e-8){
#browser()
Make_Uniform = function(i,Window,Refit,Data,Fit, tol = 1e-16){
library(dplyr);library(GeneralizedHyperbolic)
Interval = function(i, Window, Refit, Data){
I = 1:Window + (i-1)*Refit
return(Data[I,])
}
Local_Data = pull(Interval(i,Window,Refit,Data),Returns)
U = try(pnig(Local_Data, param = Fit[[i]][["param"]], intTol = tol),silent =T)
while("try-error" %in% class(U)){
U = try(pnig(Local_Data, param = Fit[[i]][["param"]],intTol = tol), silent = T)
if("try-error" %in% class(U)) tol = tol*10
if(tol > 1e-6) stop("Tolerance greater than 1e-6")
}
name = deparse(substitute(Data)) %>% strsplit("_") %>% unlist %>% .[1]
attr(U, "name") =  name
return(U)
}
library(copula)
Uniform_1 = Make_Uniform(i,Window,Refit,Data_1,Fit_1,tolerance)
Uniform_2 = Make_Uniform(i,Window,Refit,Data_2,Fit_2,tolerance)
return(suppressWarnings(try(fitCopula(Copula, cbind(Uniform_1,Uniform_2)),silent = T)))
}
{
tictoc::tic()
fit_copula(1,Window,Refit, WFC_5minute, BAC_5minute, WFC_fits, BAC_fits,tCopula(dim = 2))
tictoc::toc()
}
fit_copula = function(i,Window, Refit, Data_1, Data_2, Fit_1, Fit_2, Copula, tolerance = 1e-8){
name_1 = unlist(strsplit(x = deparse(substitute(Data_1)),split = "_"))[1]
name_2 = unlist(strsplit(x = deparse(substitute(Data_2)),split = "_"))[1]
Make_Uniform = function(i,Window,Refit,Data,Fit, tol = 1e-16){
library(dplyr);library(GeneralizedHyperbolic)
Interval = function(i, Window, Refit, Data){
I = 1:Window + (i-1)*Refit
return(Data[I,])
}
Local_Data = pull(Interval(i,Window,Refit,Data),Returns)
U = try(pnig(Local_Data, param = Fit[[i]][["param"]], intTol = tol),silent =T)
while("try-error" %in% class(U)){
U = try(pnig(Local_Data, param = Fit[[i]][["param"]],intTol = tol), silent = T)
if("try-error" %in% class(U)) tol = tol*10
if(tol > 1e-6) stop("Tolerance greater than 1e-6")
}
name = deparse(substitute(Data)) %>% strsplit("_") %>% unlist %>% .[1]
attr(U, "name") =  name
return(U)
}
library(copula)
Uniform_1 = Make_Uniform(i,Window,Refit,Data_1,Fit_1,tolerance)
Uniform_2 = Make_Uniform(i,Window,Refit,Data_2,Fit_2,tolerance)
U = cbind(Uniform_1,Uniform_2)
colnames(U) = c(name_1,name_2)
return(suppressWarnings(try(fitCopula(Copula, U),silent = T)))
}
{
tictoc::tic()
fit_copula(1,Window,Refit, WFC_5minute, BAC_5minute, WFC_fits, BAC_fits,tCopula(dim = 2))
tictoc::toc()
}
{
tictoc::tic()
Test_Fit = fit_copula(1,Window,Refit, WFC_5minute, BAC_5minute, WFC_fits, BAC_fits,tCopula(dim = 2))
tictoc::toc()
}
Test_Fit = lapply(1:3,
fit_copula,
Window = Window,
Refit = Refit,
Data_1 = WFC_5minute,
Data_2 = BAC_5minute,
Fit_1 = WFC_fits,
Fit_2 = BAC_fits,
Copula = tCopula(dim = 2))
Test_Fit
library(parallel)
cl = makePSOCKcluster(4)
Copula_fit = parLapply(cl,
1:n,
fit_copula,
Window = Window,
Refit = Refit,
Data_1 = WFC_5minute,
Data_2 = BAC_5minute,
Fit_1 = WFC_fits,
Fit_2 = BAC_fits,
Copula = tCopula(dim = 2))
fit_copula = function(i,Window, Refit, Data_1, Data_2, Fit_1, Fit_2, Copula, tolerance = 1e-8){
name_1 = unlist(strsplit(x = deparse(substitute(Data_1)),split = "_"))[1]
name_2 = unlist(strsplit(x = deparse(substitute(Data_2)),split = "_"))[1]
Make_Uniform = function(i,Window,Refit,Data,Fit, tol = 1e-16){
library(dplyr);library(GeneralizedHyperbolic)
Interval = function(i, Window, Refit, Data){
I = 1:Window + (i-1)*Refit
return(Data[I,])
}
Local_Data = pull(Interval(i,Window,Refit,Data),Returns)
U = try(pnig(Local_Data, param = Fit[[i]][["param"]], intTol = tol),silent =T)
while("try-error" %in% class(U)){
U = try(pnig(Local_Data, param = Fit[[i]][["param"]],intTol = tol), silent = T)
if("try-error" %in% class(U)) tol = tol*10
if(tol > 1e-6) stop("Tolerance greater than 1e-6")
}
name = deparse(substitute(Data)) %>% strsplit("_") %>% unlist %>% .[1]
attr(U, "name") =  name
return(U)
}
library(copula)
Uniform_1 = try(Make_Uniform(i,Window,Refit,Data_1,Fit_1,tolerance))
Uniform_2 = try(Make_Uniform(i,Window,Refit,Data_2,Fit_2,tolerance))
U = try(cbind(Uniform_1,Uniform_2))
colnames(U) = c(name_1,name_2)
return(suppressWarnings(try(fitCopula(Copula, U),silent = T)))
}
{
tictoc::tic()
Test_Fit = fit_copula(1,Window,Refit, WFC_5minute, BAC_5minute, WFC_fits, BAC_fits,tCopula(dim = 2))
tictoc::toc()
}
stopCluster(cl)
getwd()
